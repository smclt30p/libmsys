From b55c979b9c01f209a8af293f420516bf93a87839 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ognjen=20Gali=C4=87?= <gala@localhost.localdomain>
Date: Sun, 11 Sep 2016 12:57:17 +0200
Subject: [PATCH] Convert to shared library

---
 Makefile      |  20 +-
 src/libmsys.h | 354 +++++++++++++++++++++++++
 src/main.c    | 823 ----------------------------------------------------------
 3 files changed, 368 insertions(+), 829 deletions(-)
 create mode 100644 src/libmsys.h
 delete mode 100644 src/main.c

diff --git a/Makefile b/Makefile
index 7083e94..d0adb65 100644
--- a/Makefile
+++ b/Makefile
@@ -15,7 +15,7 @@
 #               Alon Bar-Lev
 
 # Name of program, compiled executable file
-PACKAGE = ms-sys
+PACKAGE = libmsys.so
 
 # Add anything extra you might need when comipiling below
 # Example: EXTRA_CFLAGS = -D MY_DEFINE=1
@@ -35,6 +35,11 @@ BINDIR = $(PREFIX)/bin
 LOCALEDIR = $(PREFIX)/share/locale
 MANDIR = $(PREFIX)/man
 
+# Installation path for libmsys
+
+INC_DIR=/usr/include
+LIB_DIR=/usr/lib64
+
 # Where your .c-files live
 SRC = src
 # Where your .h-files live
@@ -51,7 +56,7 @@ MO  = mo
 # Where .o-files will be created
 OBJ = obj
 # Where your program will be created before installation
-BIN = bin
+BIN = lib
 
 # There is no need to change anything below this line
 #***********************************************************************
@@ -63,7 +68,7 @@ INCDIRS = $(INC)
 
 CC ?= gcc
 INCLUDES = $(INCDIRS:%=-I %)
-CFLAGS ?= -O2
+CFLAGS ?= -O2 -fPIC
 ifeq ($(MAKECMDGOALS),debug)
 CFLAGS ?= -g
 endif
@@ -94,10 +99,13 @@ DEPS = $(FILES:%=$(DEP)/%.d)
 
 all debug: $(BIN)/$(PACKAGE) $(MO_FILES)
 
-install: $(DESTDIR)$(BINDIR)/$(PACKAGE) $(NLS_FILES) $(MAN_FILES)
+install: 
+	cp $(BIN)/* $(LIB_DIR)
+	cp $(SRC)/libmsys.h $(INC_DIR)
 
 uninstall:
-	$(RM) $(DESTDIR)$(BINDIR)/$(PACKAGE) $(NLS_FILES) $(MAN_FILES)
+	$(RM) $(LIB_DIR)/$(PACKAGE)
+	$(RM) $(INC_DIR)/libmsys.h
 
 messages: $(MESSAGES)
 
@@ -128,7 +136,7 @@ $(DESTDIR)$(MANDIR)/%: $(MAN)/$(dir $(*D))/$(*F)
 #	install -D -m 644 $(MAN)/$(*F) $@
 
 $(BIN)/%: $(OBJS)
-	$(CC) -o $@ $^ $(LDFLAGS)
+	$(CC) -shared -o $@ $^ $(LDFLAGS)
 
 $(MESSAGES): $(SRC_FILES) $(INC_FILES)
 	xgettext -k_ -o$@ $^
diff --git a/src/libmsys.h b/src/libmsys.h
new file mode 100644
index 0000000..81cb57c
--- /dev/null
+++ b/src/libmsys.h
@@ -0,0 +1,354 @@
+/******************************************************************
+ 
+     Copyright (C) 2009-2016 Henrik Carlqvist
+	
+	Modified for libmssys by Ognjen Galic
+ 
+     This program is free software; you can redistribute it and/or modify
+     it under the terms of the GNU General Public License as published by
+
+ 
+ ******************************************************************/
+
+#include <stdint.h>
+#include <stdio.h>
+
+/********** fat12.h Functions ************/
+
+/* returns TRUE if the file has a FAT12 file system, otherwise FALSE.
+   The file position will change when this function is called! */
+int is_fat_12_fs(FILE *fp);
+
+/* returns TRUE if the file has an exact match ot the FAT12 boot record this
+   program would create, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_fat_12_br_matches(FILE *fp);
+
+/* Writes a FAT12 boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_fat_12_br(FILE *fp, int bKeepLabel);
+
+/********* fat16.h functions ************/
+
+/* returns TRUE if the file has a FAT16 file system, otherwise FALSE.
+   The file position will change when this function is called! */
+int is_fat_16_fs(FILE *fp);
+
+/* returns TRUE if the file has a FAT16 boot record, otherwise FALSE.
+   The file position will change when this function is called! */
+int is_fat_16_br(FILE *fp);
+
+/* returns TRUE if the file has an exact match of the FAT16 boot record this
+   program would create, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_fat_16_br_matches(FILE *fp);
+
+/* Writes a FAT16 boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_fat_16_br(FILE *fp, int bKeepLabel);
+
+/* returns TRUE if the file has an exact match of the FAT16 boot record this
+   program would create for FreeDOS, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_fat_16_fd_br_matches(FILE *fp);
+
+/* Writes a FAT16 FreeDOS boot record to a file, returns TRUE on success,
+   otherwise FALSE */
+int write_fat_16_fd_br(FILE *fp, int bKeepLabel);
+
+/* returns TRUE if the file has an exact match of the FAT16 boot record this
+   program would create for ReactOS, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_fat_16_ros_br_matches(FILE *fp);
+
+/* Writes a FAT16 ReactOS boot record to a file, returns TRUE on success,
+   otherwise FALSE */
+int write_fat_16_ros_br(FILE *fp, int bKeepLabel);
+
+/******** fat32.h functions *************/
+
+/* returns TRUE if the file has a FAT32 file system, otherwise FALSE.
+   The file position will change when this function is called! */
+int is_fat_32_fs(FILE *fp);
+
+/* returns TRUE if the file has a FAT32 DOS boot record, otherwise FALSE.
+   The file position will change when this function is called! */
+int is_fat_32_br(FILE *fp);
+
+/* returns TRUE if the file has an exact match of the FAT32 DOS boot record
+   this program would create, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_fat_32_br_matches(FILE *fp);
+
+/* Writes a FAT32 DOS boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_fat_32_br(FILE *fp, int bKeepLabel);
+
+/* returns TRUE if the file has an exact match of the FAT32 boot record this
+   program would create for FreeDOS, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_fat_32_fd_br_matches(FILE *fp);
+
+/* Writes a FAT32 FreeDOS boot record to a file, returns TRUE on success,
+   otherwise FALSE */
+int write_fat_32_fd_br(FILE *fp, int bKeepLabel);
+
+/* returns TRUE if the file has an exact match of the FAT32 boot record this
+   program would create for NT, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_fat_32_nt_br_matches(FILE *fp);
+
+/* Writes a FAT32 NT boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_fat_32_nt_br(FILE *fp, int bKeepLabel);
+
+/* returns TRUE if the file has an exact match of the FAT32 boot record this
+   program would create for NT, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_fat_32_pe_br_matches(FILE *fp);
+
+/* Writes a FAT32 NT boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_fat_32_pe_br(FILE *fp, int bKeepLabel);
+
+/* returns TRUE if the file has an exact match of the FAT32 boot record this
+   program would create for ReactOS, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_fat_32_ros_br_matches(FILE *fp);
+
+/* Writes a FAT32 ReactOS boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_fat_32_ros_br(FILE *fp, int bKeepLabel);
+
+/* returns TRUE if the file has an exact match of the FAT32 boot record this
+   program would create for KolibriOS, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_fat_32_kos_br_matches(FILE *fp);
+
+/* Writes a FAT32 KolibriOS boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_fat_32_kos_br(FILE *fp, int bKeepLabel);
+
+/***************** ntfs.h functions ***************/
+
+/* returns TRUE if the file has an NFTS file system, otherwise FALSE.
+   The file position will change when this function is called! */
+int is_ntfs_fs(FILE *fp);
+
+/* returns TRUE if the file has a NTFS boot record, otherwise FALSE.
+   The file position will change when this function is called! */
+int is_ntfs_br(FILE *fp);
+
+/* returns TRUE if the file has an exact match of the NTFS boot record
+   this program would create, otherwise FALSE.
+   The file position will change when this function is called! */
+int entire_ntfs_br_matches(FILE *fp);
+
+/* Writes a NTFS boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_ntfs_br(FILE *fp);
+
+/**************** oem_id.h functions ************/
+
+/* Returns zero terminated string with OEM ID or NULL at failure */
+char *read_oem_id(FILE *fp);
+
+/* Writes OEM ID to file system */
+int write_oem_id(FILE *fp, const char *szOemId);
+
+/* Returns 0 if it seems like a bad idea to write OEM ID */
+int ok_to_write_oem_id(FILE *fp, const char *szPath, int bPrintMessages);
+
+/************* br.h functions **************/
+
+/* Sets custom number of bytes per sector, default value is 512 */
+void set_bytes_per_sector(unsigned long ulValue);
+
+/* Gets Windows Disk Signature from MBR */
+uint32_t read_windows_disk_signature(FILE *fp);
+
+/* Sets a new Windows Disk Signature to MBR */
+int write_windows_disk_signature(FILE *fp, uint32_t tWDS);
+
+/* Reads copy protect bytes after Windows Disk Signature from MBR */
+uint16_t read_mbr_copy_protect_bytes(FILE *fp);
+const char *read_mbr_copy_protect_bytes_explained(FILE *fp);
+
+/* returns TRUE if the file has a boot record, otherwise FALSE.
+   The file position will change when this function is called! */
+int is_br(FILE *fp);
+
+/* returns TRUE if the file has a LILO boot record, otherwise FALSE.
+   The file position will change when this function is called! */
+int is_lilo_br(FILE *fp);
+
+/* returns TRUE if the file has a Microsoft dos master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_dos_mbr(FILE *fp);
+
+/* returns TRUE if the file has a Microsoft dos master boot record with the
+   undocumented F2 instruction, otherwise FALSE. The file position will change
+   when this function is called! */
+int is_dos_f2_mbr(FILE *fp);
+
+/* returns TRUE if the file has a Microsoft 95b master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_95b_mbr(FILE *fp);
+
+/* returns TRUE if the file has a Microsoft 2000 master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_2000_mbr(FILE *fp);
+
+/* returns TRUE if the file has a Microsoft Vista master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_vista_mbr(FILE *fp);
+
+/* returns TRUE if the file has a Microsoft 7 master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_win7_mbr(FILE *fp);
+
+/* returns TRUE if the file has a Rufus master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_rufus_mbr(FILE *fp);
+
+/* returns TRUE if the file has a ReactOS master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_reactos_mbr(FILE *fp);
+
+/* returns TRUE if the file has a Grub4DOS master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_grub4dos_mbr(FILE *fp);
+
+/* returns TRUE if the file has a Grub 2.0 master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_grub2_mbr(FILE *fp);
+
+/* returns TRUE if the file has a KolibriOS master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_kolibrios_mbr(FILE *fp);
+
+/* returns TRUE if the file has a syslinux master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_syslinux_mbr(FILE *fp);
+
+/* returns TRUE if the file has a syslinux GPT master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_syslinux_gpt_mbr(FILE *fp);
+
+/* returns TRUE if the file has a zeroed master boot record, otherwise
+   FALSE.The file position will change when this function is called! */
+int is_zero_mbr(FILE *fp);
+int is_zero_mbr_not_including_disk_signature_or_copy_protect(FILE *fp);
+
+/* Writes a dos master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_dos_mbr(FILE *fp);
+
+/* Writes a 95b master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_95b_mbr(FILE *fp);
+
+/* Writes a 2000 master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_2000_mbr(FILE *fp);
+
+/* Writes a Vista master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_vista_mbr(FILE *fp);
+
+/* Writes a Windows 7 master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_win7_mbr(FILE *fp);
+
+/* Writes a Rufus master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_rufus_mbr(FILE *fp);
+
+/* Writes a ReactOS master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_reactos_mbr(FILE *fp);
+
+/* Writes a Grub4DOS master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_grub4dos_mbr(FILE *fp);
+
+/* Writes a Grub 2.0 master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_grub2_mbr(FILE *fp);
+
+/* Writes a KolibriOS master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_kolibrios_mbr(FILE *fp);
+
+/* Writes a syslinux master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_syslinux_mbr(FILE *fp);
+
+/* Writes a syslinux GPT master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_syslinux_gpt_mbr(FILE *fp);
+
+/* Writes an empty (zeroed) master boot record to a file, returns TRUE on success, otherwise
+   FALSE */
+int write_zero_mbr(FILE *fp);
+
+/***************** identify.h functions *******************/
+
+
+#define NO_WRITING              0
+#define AUTO_BR                 1
+#define MBR_DOS                 2
+#define FAT12_BR                3
+#define FAT16_BR                4
+#define FAT32_BR                5
+#define FAT32NT_BR              6
+#define MBR_95B                 7
+#define MBR_2000                8
+#define MBR_VISTA               9
+#define MBR_WIN7               10
+#define MBR_SYSLINUX           11
+#define MBR_ZERO               12
+#define FAT16FD_BR             13
+#define FAT32FD_BR             14
+#define FAT32PE_BR             15
+#define NTFS_BR                16
+#define MBR_GPT_SYSLINUX       17
+#define MBR_RUFUS              18
+#define MBR_REACTOS            19
+#define FAT16ROS_BR            20
+#define FAT32ROS_BR            21
+#define FAT32KOS_BR            22
+#define MBR_GRUB4DOS           23
+#define MBR_GRUB2              24
+#define MBR_KOLIBRIOS          25
+#define NUMBER_OF_RECORD_TYPES 26
+
+/* Returns the number of sectors on disk before partition */
+unsigned long partition_start_sector(FILE *fp);
+/* Returns the number of heads for the drive of a partition */
+unsigned short partition_number_of_heads(FILE *fp);
+
+/* Returns TRUE if writing a boot record of type iBr seems like a good idea,
+   otherwise FALSE */
+int sanity_check(FILE *fp, const char *szPath, int iBr, int bPrintMessages);
+
+/* Prints some information about a device */
+void diagnose(FILE *fp, const char *szPath);
+
+/* Does a smart automatic selection of which boot record to write, returns
+   the kind of boot record as defined above */
+int smart_select(FILE *fp);
+
+/* Skipping NLS */
+
+/* Writes the number of heads to a partition, if iHeads == -1 an attempt is made
+   to find out the correct value,
+   returns TRUE on success, otherwise FALSE */
+int write_partition_number_of_heads(FILE *fp, int iHeads);
+
+/* Writes the start sector number to a partition (also known as
+   "number of hidden sectors"), returns TRUE on success, otherwise FALSE */
+int write_partition_start_sector_number(FILE *fp);
+
+/* Writes a physical disk drive id of 0x80 (for C:) to a partition */
+int write_partition_physical_disk_drive_id_fat32(FILE *fp);
diff --git a/src/main.c b/src/main.c
deleted file mode 100644
index 3eb1556..0000000
--- a/src/main.c
+++ /dev/null
@@ -1,823 +0,0 @@
-/******************************************************************
-    Copyright (C) 2009-2016 Henrik Carlqvist
-
-    This program is free software; you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation; either version 2 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, write to the Free Software
-    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-******************************************************************/
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <errno.h>
-
-#include "fat12.h"
-#include "fat16.h"
-#include "fat32.h"
-#include "ntfs.h"
-#include "oem_id.h"
-#include "br.h"
-#include "identify.h"
-#include "nls.h"
-#include "partition_info.h"
-
-#define VERSION "2.5.3"
-
-void print_help(const char *szCommand);
-void print_version(void);
-int parse_switches(int argc, char **argv, int *piBr,
-		   int *pbForce, int *pbPrintVersion,
-		   int *pbKeepLabel, int *pbWritePartitionInfo, int *piHeads,
-		   char **pszOemId,
-		   int *pbWriteWindowsDiskSignature,
-		   uint32_t *tWindowsDiskSignature);
-int isnumber(const char *szString);
-
-int main(int argc, char **argv)
-{
-   FILE *fp;
-   int iBr = NO_WRITING;
-   int bForce = 0;
-   int bPrintVersion = 0;
-   int bKeepLabel = 1;
-   int bWritePartitionInfo = 0;
-   int iHeads = -1;
-   char *szOemId = NULL;
-   int bWriteWindowsDiskSignature = 0;
-   uint32_t tWindowsDiskSignature = 0x0;
-   int iRet = 0;
-
-   nls_init();
-   if(parse_switches(argc, argv, &iBr, &bForce, &bPrintVersion,
-		     &bKeepLabel, &bWritePartitionInfo, &iHeads,
-		     &szOemId,
-		     &bWriteWindowsDiskSignature, &tWindowsDiskSignature))
-   {
-      print_help(argv[0]);
-      return 0;
-   }
-   if(bPrintVersion)
-   {
-      print_version();
-      if(argc < 3)
-	 return 0;
-   }
-   fp=fopen(argv[argc-1],
-	    (iBr || bWritePartitionInfo || szOemId || bWriteWindowsDiskSignature) ?
-	    "r+b" : "rb");
-   if(!fp)
-   {
-      printf(_("Unable to open %s, %s\n"), argv[argc-1], strerror(errno));
-      return 1;
-   }
-   if(iBr == AUTO_BR)
-   {
-      iBr = smart_select(fp);
-      if(!iBr)
-	 printf(_("Unable to automaticly select boot record for %s\n"),
-		argv[argc-1]);
-   }
-   if(iBr && !bForce)
-   {
-      if( ! sanity_check(fp, argv[argc-1], iBr, 1) )
-      {
-	 fclose(fp);
-	 return 1;
-      }
-   }
-   if(szOemId && !bForce)
-   {
-      if( ! ok_to_write_oem_id(fp, argv[argc-1], 1) )
-      {
-	 fclose(fp);
-	 return 1;
-      }
-   }
-   if(bWriteWindowsDiskSignature && !bForce)
-   {
-      if( ! sanity_check(fp, argv[argc-1], MBR_ZERO, 1) )
-      {
-	 fclose(fp);
-	 return 1;
-      }
-   }
-   if( bWritePartitionInfo )
-   {
-      if( !iBr && !bForce)
-      {
-	 if( ! sanity_check(fp, argv[argc-1], FAT32_BR, 1) )
-	 {
-	    fclose(fp);
-	    return 1;
-	 }
-      }
-      if( write_partition_start_sector_number(fp) )
-      {
-	 printf(_("Start sector %ld (nr of hidden sectors) successfully written to %s\n"),
-		partition_start_sector(fp),
-		argv[argc-1]);
-	 if( write_partition_physical_disk_drive_id_fat32(fp) )
-	 {
-	    printf(_("Physical disk drive id 0x80 (C:) successfully written to %s\n"),
-		   argv[argc-1]);
-	    if( write_partition_number_of_heads(fp, iHeads))
-	    {
-	       printf(_("Number of heads (%d) successfully written to %s\n"),
-		      iHeads != -1 ? iHeads : partition_number_of_heads(fp),
-		      argv[argc-1]);
-	    }
-	    else
-	    {
-	       printf(_("Failed writing number of heads to %s\n"),
-		      argv[argc-1]);
-	    }
-	 }
-	 else
-	 {
-	    printf(_("Failed writing physical disk drive id to %s\n"),
-		   argv[argc-1]);
-	 }
-      }
-      else
-      {
-	 printf(_("Failed writing start sector to %s, this is only possible to do with\n"),
-		argv[argc-1]);
-	 printf(_("real partitions!\n"));
-	 iRet = 1;
-      }
-   }
-   switch(iBr)
-   {
-      case NO_WRITING:
-      {
-	 if( (!bWritePartitionInfo) && (!szOemId) && (!bWriteWindowsDiskSignature) )
-	 {
-	    diagnose(fp, argv[argc-1]);
-	 }
-	 break;
-      }
-      case MBR_WIN7:
-      {
-         if(write_win7_mbr(fp))
-            printf(_("Windows 7 master boot record successfully written to %s\n"),
-                   argv[argc-1]);
-         else
-         {
-            printf(_("Failed writing Windows 7 master boot record to %s\n"),
-                   argv[argc-1]);
-            iRet = 1;
-         }
-      }
-      break;
-      case MBR_VISTA:
-      {
-         if(write_vista_mbr(fp))
-            printf(_("Windows Vista master boot record successfully written to %s\n"),
-                   argv[argc-1]);
-         else
-         {
-            printf(_("Failed writing Windows Vista master boot record to %s\n"),
-                   argv[argc-1]);
-            iRet = 1;
-         }
-      }
-      break;
-      case MBR_2000:
-      {
-	 if(write_2000_mbr(fp))
-	    printf(_("Windows 2000/XP/2003 master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing Windows 2000/XP/2003 master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case MBR_95B:
-      {
-	 if(write_95b_mbr(fp))
-	    printf(_("Windows 95B/98/98SE/ME master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing Windows 95B/98/98SE/ME master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case MBR_DOS:
-      {
-	 if(write_dos_mbr(fp))
-	    printf(_("DOS/Windows NT master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing DOS/Windows NT master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case MBR_SYSLINUX:
-      {
-	 if(write_syslinux_mbr(fp))
-	    printf(_("Syslinux master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing Syslinux master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case MBR_GPT_SYSLINUX:
-      {
-	 if(write_syslinux_gpt_mbr(fp))
-	    printf(_("Syslinux GPT master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing Syslinux GPT master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case MBR_RUFUS:
-      {
-	 if(write_rufus_mbr(fp))
-	    printf(_("Rufus master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing Rufus master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case MBR_REACTOS:
-      {
-	 if(write_reactos_mbr(fp))
-	    printf(_("ReactOS master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing ReactOS master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case MBR_KOLIBRIOS:
-      {
-	 if(write_kolibrios_mbr(fp))
-	    printf(_("KolibriOS master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing KolibriOS master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case MBR_GRUB4DOS:
-      {
-	 if(write_grub4dos_mbr(fp))
-	    printf(_("Grub4DOS master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing Grub4DOS master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case MBR_GRUB2:
-      {
-	 if(write_grub2_mbr(fp))
-	    printf(_("GRUB 2 master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing GRUB2 master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case MBR_ZERO:
-      {
-	 if(write_zero_mbr(fp))
-	    printf(_("Empty (zeroed) master boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing empty (zeroed) master boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case FAT12_BR:
-      {
-	 if(write_fat_12_br(fp, bKeepLabel))
-	    printf(_("FAT12 boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing FAT12 boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case FAT16_BR:
-      {
-	 if(write_fat_16_br(fp, bKeepLabel))
-	    printf(_("FAT16 boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing FAT16 boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case FAT16FD_BR:
-      {
-	 if(write_fat_16_fd_br(fp, bKeepLabel))
-	    printf(_("FAT16 FreeDOS boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing FAT16 FreeDOS boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case FAT16ROS_BR:
-      {
-	 if(write_fat_16_ros_br(fp, bKeepLabel))
-	    printf(_("FAT16 ReactOS boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing FAT16 ReactOS boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case FAT32NT_BR:
-      {
-	 if(write_fat_32_nt_br(fp, bKeepLabel))
-	    printf(_("FAT32 NT boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing FAT32 NT boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case FAT32PE_BR:
-      {
-	 if(write_fat_32_pe_br(fp, bKeepLabel))
-	    printf(_("FAT32 PE boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing FAT32 PE boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case FAT32FD_BR:
-      {
-	 if(write_fat_32_fd_br(fp, bKeepLabel))
-	    printf(_("FAT32 FreeDOS boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing FAT32 FreeDOS boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case FAT32KOS_BR:
-      {
-	 if(write_fat_32_kos_br(fp, bKeepLabel))
-	    printf(
-	       _("FAT32 KolibriOS boot record successfully written to %s\n"),
-	       argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing FAT32 KolibriOS boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case FAT32ROS_BR:
-      {
-	 if(write_fat_32_ros_br(fp, bKeepLabel))
-	    printf(_("FAT32 ReactOS boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing FAT32 ReactOS boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case FAT32_BR:
-      {
-	 if(write_fat_32_br(fp, bKeepLabel))
-	    printf(_("FAT32 DOS boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing FAT32 DOS boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      case NTFS_BR:
-      {
-	 if(write_ntfs_br(fp))
-	    printf(_("NTFS Windows 7 boot record successfully written to %s\n"),
-		   argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing NTFS Windows 7 boot record to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }
-      }
-      break;
-      default:
-      {
-	 printf(_("Whoops, internal error, unknown boot record\n"));
-      }
-      break;
-   }
-   if(szOemId)
-   {
-      if(write_oem_id(fp, szOemId))
-	 printf(_("OEM ID '%s' successfully written to %s\n"),
-		szOemId, argv[argc-1]);
-      else
-      {
-	 printf(_("Failed writing OEM ID to %s\n"),
-		argv[argc-1]);
-	 iRet = 1;
-      }	    
-   }
-   if(bWriteWindowsDiskSignature)
-   {
-      if(write_windows_disk_signature(fp, tWindowsDiskSignature))
-	 printf(_("Windows Disk Signature 0x%08x successfully written to %s\n"),
-		tWindowsDiskSignature, argv[argc-1]);
-	 else
-	 {
-	    printf(_("Failed writing Windows Disk Signature to %s\n"),
-		   argv[argc-1]);
-	    iRet = 1;
-	 }	    
-   }
-   fclose(fp);
-   return iRet;
-} /* main */
-
-void print_help(const char *szCommand)
-{
-   printf(_("Usage:\n\t%s [options] [device]\nOptions:\n"), szCommand);
-   printf(
-      _("    -1, --fat12     Write a FAT12 floppy boot record to device\n"));
-   printf(
-      _("    -2, --fat32nt   Write a FAT32 partition NT boot record to device\n"));
-   printf(
-      _("    -e, --fat32pe   Write a FAT32 partition PE boot record to device\n"));
-   printf(
-      _("    -3, --fat32     Write a FAT32 partition DOS boot record to device\n"));
-   printf(
-      _("    -4, --fat32free Write a FAT32 partition FreeDOS boot record to device\n"));
-   printf(
-      _("    -5, --fat16free Write a FAT16 partition FreeDOS boot record to device\n"));
-   printf(
-      _("    -6, --fat16     Write a FAT16 partition DOS boot record to device\n"));
-   printf(
-      _("    -n, --ntfs      Write a NTFS partition Windows 7 boot record to device\n"));
-   printf(
-      _("    -o, --fat16ros  Write a FAT16 partition ReactOS boot record to device\n"));
-   printf(
-      _("    -c, --fat32ros  Write a FAT32 partition ReactOS boot record to device\n"));
-   printf(
-      _("    -q, --fat32kos  Write a FAT32 partition KolibriOS boot record to device\n"));
-   printf(
-      _("    -l, --wipelabel Reset partition disk label in boot record\n"));
-   printf(
-      _("    -p, --partition Write partition info (hidden sectors, heads and drive id)\n"));
-   printf(
-      _("                    to boot record\n"));
-   printf(
-      _("    -H, --heads <n> Manually set number of heads if partition info is written\n"));
-   printf(
-      _("    -B, --bps <n>   Manually set number of bytes per sector (default 512)\n"));
-   printf(
-      _("    -O, --writeoem <s>   Write OEM ID string <s> to file system\n"));
-   printf(
-      _("    -S, --writewds <x>   Write Windows Disk Signature hexadecimal <x> to MBR\n"));
-   printf(
-      _("    -7, --mbr7      Write a Windows 7 MBR to device\n"));
-   printf(
-      _("    -i, --mbrvista  Write a Windows Vista MBR to device\n"));
-   printf(
-      _("    -m, --mbr       Write a Windows 2000/XP/2003 MBR to device\n"));
-   printf(
-      _("    -9, --mbr95b    Write a Windows 95B/98/98SE/ME MBR to device\n"));
-   printf(
-      _("    -d, --mbrdos    Write a DOS/Windows NT MBR to device\n"));
-   printf(
-      _("    -s, --mbrsyslinux    Write a Syslinux MBR to device\n"));
-   printf(
-      _("    -t, --mbrgptsyslinux Write a Syslinux GPT MBR to device\n"));
-   printf(
-      _("    -a, --mbrreactos     Write a ReactOS MBR to device\n"));
-   printf(
-      _("    -k, --mbrkolibrios   Write a KolibriOS MBR to device\n"));
-   printf(
-      _("    -r, --mbrrufus  Write a Rufus MBR to device\n"));
-   printf(
-      _("    -g, --mbrgrub4dos    Write a Grub4Dos MBR to device\n"));
-   printf(
-      _("    -b, --mbrgrub2  Write a Grub 2 MBR to device\n"));
-   printf(
-      _("    -z, --mbrzero   Write an empty (zeroed) MBR to device\n"));
-   printf(
-      _("    -f, --force     Force writing of boot record\n"));
-   printf(
-      _("    -h, --help      Display this help and exit\n"));
-   printf(
-      _("    -v, --version   Show program version\n"));
-   printf(
-      _("    -w, --write     Write automatically selected boot record to device\n\n"));
-   printf(
-      _("    Default         Inspect current boot record\n\n"));
-   printf(
-      _("Warning: Writing the wrong kind of boot record to a device might\n"));
-   printf(
-      _("destroy partition information or file system!\n\n"));
-} /* print_help */
-
-void print_version(void)
-{
-   printf(_("ms-sys version %s\n"), VERSION);
-   printf(_("Written by Henrik Carlqvist\n\n"));
-   printf(_("Copyright (C) 2009-2016 Free Software Foundation, Inc.\n"));
-   printf(_("This is free software; see the source for copying conditions.  There is NO\n"));
-   printf(_("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n"));
-} /* print_version */
-
-int parse_switches(int argc, char **argv, int *piBr,
-		   int *pbForce, int *pbPrintVersion, int *pbKeepLabel,
-		   int *pbWritePartitionInfo, int *piHeads,
-		   char **pszOemId,
-		   int *pbWriteWindowsDiskSignature,
-		   uint32_t *ptWindowsDiskSignature)
-{
-   int bHelp = 0;
-   int i;
-
-   *piBr = NO_WRITING;
-   *pbForce = 0;
-   *pbPrintVersion = 0;
-   *pbKeepLabel = 1;
-   *pbWritePartitionInfo = 0;
-   *piHeads = -1;
-   *pbWriteWindowsDiskSignature = 0;
-   *ptWindowsDiskSignature = 0;
-
-   if(argc < 2)
-      return 1;
-   /* Don't parse the device */
-   argc--;
-   if(( ! strcmp("-h", argv[argc])) ||
-      ( ! strcmp("--help", argv[argc])))
-      bHelp = 1;
-   else if(( ! strcmp("-v", argv[argc])) ||
-	   ( ! strcmp("--version", argv[argc])))
-      *pbPrintVersion = 1;
-   /* Don't parse the name of the program */
-   while(--argc)
-   {
-      if( ! strcmp("--fat12", argv[argc]))
-	 *piBr = FAT12_BR;
-      else if( ! strcmp("--fat32nt", argv[argc]))
-	 *piBr = FAT32NT_BR;
-      else if( ! strcmp("--fat32pe", argv[argc]))
-	 *piBr = FAT32PE_BR;
-      else if( ! strcmp("--fat32", argv[argc]))
-	 *piBr = FAT32_BR;
-      else if( ! strcmp("--fat32free", argv[argc]))
-	 *piBr = FAT32FD_BR;
-      else if( ! strcmp("--fat32ros", argv[argc]))
-	 *piBr = FAT32ROS_BR;
-      else if( ! strcmp("--fat32kos", argv[argc]))
-	 *piBr = FAT32KOS_BR;
-      else if( ! strcmp("--fat16ros", argv[argc]))
-	 *piBr = FAT16ROS_BR;
-      else if( ! strcmp("--fat16free", argv[argc]))
-	 *piBr = FAT16FD_BR;
-      else if( ! strcmp("--fat16", argv[argc]))
-	 *piBr = FAT16_BR;
-      else if( ! strcmp("--ntfs", argv[argc]))
-	 *piBr = NTFS_BR;
-      else if( ! strcmp("--force", argv[argc]))
-	 *pbForce = 1;
-      else if( ! strcmp("--wipelabel", argv[argc]))
-	 *pbKeepLabel = 0;
-      else if( ! strcmp("--partition", argv[argc]))
-	 *pbWritePartitionInfo = 1;
-      else if( ! strcmp("--mbr7", argv[argc]))
-	 *piBr = MBR_WIN7;
-      else if( ! strcmp("--mbrvista", argv[argc]))
-	 *piBr = MBR_VISTA;
-      else if( ! strcmp("--mbr", argv[argc]))
-	 *piBr = MBR_2000;
-      else if( ! strcmp("--mbr95b", argv[argc]))
-	 *piBr = MBR_95B;
-      else if( ! strcmp("--mbrdos", argv[argc]))
-	 *piBr = MBR_DOS;
-      else if( ! strcmp("--mbrsyslinux", argv[argc]))
-	 *piBr = MBR_SYSLINUX;
-      else if( ! strcmp("--mbrgptsyslinux", argv[argc]))
-	 *piBr = MBR_GPT_SYSLINUX;
-      else if( ! strcmp("--mbrrufus", argv[argc]))
-	 *piBr = MBR_RUFUS;
-      else if( ! strcmp("--mbrreactos", argv[argc]))
-	 *piBr = MBR_REACTOS;
-      else if( ! strcmp("--mbrkolibrios", argv[argc]))
-	 *piBr = MBR_KOLIBRIOS;
-      else if( ! strcmp("--mbrgrub4dos", argv[argc]))
-	 *piBr = MBR_GRUB4DOS;
-      else if( ! strcmp("--mbrgrub2", argv[argc]))
-	 *piBr = MBR_GRUB2;
-      else if( ! strcmp("--mbrzero", argv[argc]))
-	 *piBr = MBR_ZERO;
-      else if( ! strcmp("--write", argv[argc]))
-	 *piBr = AUTO_BR;
-      else if( ! strcmp("--version", argv[argc]))
-	 *pbPrintVersion = 1;
-      else if( (argv[argc][0] == '-') && (argv[argc][1] != '-') && !argv[argc][2])
-      {
-	 for(i=1; argv[argc][i]; i++)
-	 {
-	    switch(argv[argc][i])
-	    {
-	       case 'a':
-		  *piBr = MBR_REACTOS;
-		  break;
-	       case '1':
-		  *piBr = FAT12_BR;
-		  break;
-	       case '2':
-		  *piBr = FAT32NT_BR;
-		  break;
-	       case 'e':
-		  *piBr = FAT32PE_BR;
-		  break;
-	       case '3':
-		  *piBr = FAT32_BR;
-		  break;
-	       case '4':
-		  *piBr = FAT32FD_BR;
-		  break;
-	       case '5':
-		  *piBr = FAT16FD_BR;
-		  break;
-	       case '6':
-		  *piBr = FAT16_BR;
-		  break;
-	       case 'o':
-		  *piBr = FAT16ROS_BR;
-		  break;
-	       case 'c':
-		  *piBr = FAT32ROS_BR;
-		  break;
-	       case 'q':
-		  *piBr = FAT32KOS_BR;
-		  break;
-	       case 'n':
-		  *piBr = NTFS_BR;
-		  break;
-	       case 'f':
-		  *pbForce = 1;
-		  break;
-	       case 'l':
-		  *pbKeepLabel = 0;
-		  break;
-	       case 'p':
-		  *pbWritePartitionInfo = 1;
-		  break;
-	       case '7':
-		  *piBr = MBR_WIN7;
-		  break;
-	       case 'i':
-		  *piBr = MBR_VISTA;
-		  break;
-	       case 'm':
-		  *piBr = MBR_2000;
-		  break;
-	       case '9':
-		  *piBr = MBR_95B;
-		  break;
-	       case 'd':
-		  *piBr = MBR_DOS;
-		  break;
-	       case 'r':
-		  *piBr = MBR_RUFUS;
-		  break;
-	       case 's':
-		  *piBr = MBR_SYSLINUX;
-		  break;
-	       case 't':
-		  *piBr = MBR_GPT_SYSLINUX;
-		  break;
-	       case 'g':
-		  *piBr = MBR_GRUB4DOS;
-		  break;
-	       case 'b':
-		  *piBr = MBR_GRUB2;
-		  break;
-	       case 'k':
-		  *piBr = MBR_KOLIBRIOS;
-		  break;
-	       case 'z':
-		  *piBr = MBR_ZERO;
-		  break;
-	       case 'w':
-		  *piBr = AUTO_BR;
-		  break;
-	       case 'v':
-		  *pbPrintVersion = 1;
-		  break;
-	       default:
-		  bHelp=1;
-		  break;
-	    }
-	 }
-      }
-      else if((!strcmp("--heads", argv[argc-1]) || !strcmp("-H", argv[argc-1])) &&
-	      isnumber(argv[argc]))
-	 *piHeads = atoi(argv[argc--]);
-      else if((!strcmp("--bps", argv[argc-1]) || !strcmp("-B", argv[argc-1])) &&
-	      isnumber(argv[argc]))
-	 set_bytes_per_sector(strtoul(argv[argc--], NULL, 0));
-      else if((!strcmp("--writeoem", argv[argc-1]) || !strcmp("-O", argv[argc-1])))
-	 *pszOemId = argv[argc--];
-      else if((!strcmp("--writewds", argv[argc-1]) || !strcmp("-S", argv[argc-1])))
-      {
-	 *pbWriteWindowsDiskSignature = 1;
-	 *ptWindowsDiskSignature = strtoul(argv[argc--], NULL, 16);
-      }
-      else
-	 bHelp = 1;
-   }
-   return bHelp;
-} /* parse_switches */
-
-int isnumber(const char *szString)
-{
-   int bRet = (szString && *szString);
-   while(bRet && *szString)
-   {
-      if((*szString < '0') || (*szString > '9'))
-	 bRet = 0;
-      szString++;
-   }
-   return bRet;
-} /* isnumber */
-- 
2.7.4

